# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import operations_pb2 as operations__pb2
from . import orders_pb2 as orders__pb2
from . import sandbox_pb2 as sandbox__pb2
from . import users_pb2 as users__pb2


class SandboxServiceStub(object):
    """Сервис для работы с песочницей TINKOFF INVEST API
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OpenSandboxAccount = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/OpenSandboxAccount',
                request_serializer=sandbox__pb2.OpenSandboxAccountRequest.SerializeToString,
                response_deserializer=sandbox__pb2.OpenSandboxAccountResponse.FromString,
                )
        self.GetSandboxAccounts = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxAccounts',
                request_serializer=users__pb2.GetAccountsRequest.SerializeToString,
                response_deserializer=users__pb2.GetAccountsResponse.FromString,
                )
        self.CloseSandboxAccount = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/CloseSandboxAccount',
                request_serializer=sandbox__pb2.CloseSandboxAccountRequest.SerializeToString,
                response_deserializer=sandbox__pb2.CloseSandboxAccountResponse.FromString,
                )
        self.PostSandboxOrder = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/PostSandboxOrder',
                request_serializer=orders__pb2.PostOrderRequest.SerializeToString,
                response_deserializer=orders__pb2.PostOrderResponse.FromString,
                )
        self.ReplaceSandboxOrder = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/ReplaceSandboxOrder',
                request_serializer=orders__pb2.ReplaceOrderRequest.SerializeToString,
                response_deserializer=orders__pb2.PostOrderResponse.FromString,
                )
        self.GetSandboxOrders = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrders',
                request_serializer=orders__pb2.GetOrdersRequest.SerializeToString,
                response_deserializer=orders__pb2.GetOrdersResponse.FromString,
                )
        self.CancelSandboxOrder = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/CancelSandboxOrder',
                request_serializer=orders__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=orders__pb2.CancelOrderResponse.FromString,
                )
        self.GetSandboxOrderState = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrderState',
                request_serializer=orders__pb2.GetOrderStateRequest.SerializeToString,
                response_deserializer=orders__pb2.OrderState.FromString,
                )
        self.GetSandboxPositions = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPositions',
                request_serializer=operations__pb2.PositionsRequest.SerializeToString,
                response_deserializer=operations__pb2.PositionsResponse.FromString,
                )
        self.GetSandboxOperations = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperations',
                request_serializer=operations__pb2.OperationsRequest.SerializeToString,
                response_deserializer=operations__pb2.OperationsResponse.FromString,
                )
        self.GetSandboxPortfolio = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPortfolio',
                request_serializer=operations__pb2.PortfolioRequest.SerializeToString,
                response_deserializer=operations__pb2.PortfolioResponse.FromString,
                )
        self.SandboxPayIn = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/SandboxPayIn',
                request_serializer=sandbox__pb2.SandboxPayInRequest.SerializeToString,
                response_deserializer=sandbox__pb2.SandboxPayInResponse.FromString,
                )
        self.GetSandboxWithdrawLimits = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxWithdrawLimits',
                request_serializer=operations__pb2.WithdrawLimitsRequest.SerializeToString,
                response_deserializer=operations__pb2.WithdrawLimitsResponse.FromString,
                )


class SandboxServiceServicer(object):
    """Сервис для работы с песочницей TINKOFF INVEST API
    """

    def OpenSandboxAccount(self, request, context):
        """Метод регистрации счёта в песочнице.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSandboxAccounts(self, request, context):
        """Метод получения счетов в песочнице.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseSandboxAccount(self, request, context):
        """Метод закрытия счёта в песочнице.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostSandboxOrder(self, request, context):
        """Метод выставления торгового поручения в песочнице.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplaceSandboxOrder(self, request, context):
        """Метод изменения выставленной заявки.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSandboxOrders(self, request, context):
        """Метод получения списка активных заявок по счёту в песочнице.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelSandboxOrder(self, request, context):
        """Метод отмены торгового поручения в песочнице.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSandboxOrderState(self, request, context):
        """Метод получения статуса заявки в песочнице.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSandboxPositions(self, request, context):
        """Метод получения позиций по виртуальному счёту песочницы.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSandboxOperations(self, request, context):
        """Метод получения операций в песочнице по номеру счёта.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSandboxPortfolio(self, request, context):
        """Метод получения портфолио в песочнице.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SandboxPayIn(self, request, context):
        """Метод пополнения счёта в песочнице.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSandboxWithdrawLimits(self, request, context):
        """Метод получения доступного остатка для вывода средств в песочнице.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SandboxServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OpenSandboxAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenSandboxAccount,
                    request_deserializer=sandbox__pb2.OpenSandboxAccountRequest.FromString,
                    response_serializer=sandbox__pb2.OpenSandboxAccountResponse.SerializeToString,
            ),
            'GetSandboxAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSandboxAccounts,
                    request_deserializer=users__pb2.GetAccountsRequest.FromString,
                    response_serializer=users__pb2.GetAccountsResponse.SerializeToString,
            ),
            'CloseSandboxAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseSandboxAccount,
                    request_deserializer=sandbox__pb2.CloseSandboxAccountRequest.FromString,
                    response_serializer=sandbox__pb2.CloseSandboxAccountResponse.SerializeToString,
            ),
            'PostSandboxOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.PostSandboxOrder,
                    request_deserializer=orders__pb2.PostOrderRequest.FromString,
                    response_serializer=orders__pb2.PostOrderResponse.SerializeToString,
            ),
            'ReplaceSandboxOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplaceSandboxOrder,
                    request_deserializer=orders__pb2.ReplaceOrderRequest.FromString,
                    response_serializer=orders__pb2.PostOrderResponse.SerializeToString,
            ),
            'GetSandboxOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSandboxOrders,
                    request_deserializer=orders__pb2.GetOrdersRequest.FromString,
                    response_serializer=orders__pb2.GetOrdersResponse.SerializeToString,
            ),
            'CancelSandboxOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelSandboxOrder,
                    request_deserializer=orders__pb2.CancelOrderRequest.FromString,
                    response_serializer=orders__pb2.CancelOrderResponse.SerializeToString,
            ),
            'GetSandboxOrderState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSandboxOrderState,
                    request_deserializer=orders__pb2.GetOrderStateRequest.FromString,
                    response_serializer=orders__pb2.OrderState.SerializeToString,
            ),
            'GetSandboxPositions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSandboxPositions,
                    request_deserializer=operations__pb2.PositionsRequest.FromString,
                    response_serializer=operations__pb2.PositionsResponse.SerializeToString,
            ),
            'GetSandboxOperations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSandboxOperations,
                    request_deserializer=operations__pb2.OperationsRequest.FromString,
                    response_serializer=operations__pb2.OperationsResponse.SerializeToString,
            ),
            'GetSandboxPortfolio': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSandboxPortfolio,
                    request_deserializer=operations__pb2.PortfolioRequest.FromString,
                    response_serializer=operations__pb2.PortfolioResponse.SerializeToString,
            ),
            'SandboxPayIn': grpc.unary_unary_rpc_method_handler(
                    servicer.SandboxPayIn,
                    request_deserializer=sandbox__pb2.SandboxPayInRequest.FromString,
                    response_serializer=sandbox__pb2.SandboxPayInResponse.SerializeToString,
            ),
            'GetSandboxWithdrawLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSandboxWithdrawLimits,
                    request_deserializer=operations__pb2.WithdrawLimitsRequest.FromString,
                    response_serializer=operations__pb2.WithdrawLimitsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tinkoff.public.invest.api.contract.v1.SandboxService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SandboxService(object):
    """Сервис для работы с песочницей TINKOFF INVEST API
    """

    @staticmethod
    def OpenSandboxAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/OpenSandboxAccount',
            sandbox__pb2.OpenSandboxAccountRequest.SerializeToString,
            sandbox__pb2.OpenSandboxAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSandboxAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxAccounts',
            users__pb2.GetAccountsRequest.SerializeToString,
            users__pb2.GetAccountsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseSandboxAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/CloseSandboxAccount',
            sandbox__pb2.CloseSandboxAccountRequest.SerializeToString,
            sandbox__pb2.CloseSandboxAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PostSandboxOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/PostSandboxOrder',
            orders__pb2.PostOrderRequest.SerializeToString,
            orders__pb2.PostOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReplaceSandboxOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/ReplaceSandboxOrder',
            orders__pb2.ReplaceOrderRequest.SerializeToString,
            orders__pb2.PostOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSandboxOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrders',
            orders__pb2.GetOrdersRequest.SerializeToString,
            orders__pb2.GetOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelSandboxOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/CancelSandboxOrder',
            orders__pb2.CancelOrderRequest.SerializeToString,
            orders__pb2.CancelOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSandboxOrderState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOrderState',
            orders__pb2.GetOrderStateRequest.SerializeToString,
            orders__pb2.OrderState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSandboxPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPositions',
            operations__pb2.PositionsRequest.SerializeToString,
            operations__pb2.PositionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSandboxOperations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxOperations',
            operations__pb2.OperationsRequest.SerializeToString,
            operations__pb2.OperationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSandboxPortfolio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxPortfolio',
            operations__pb2.PortfolioRequest.SerializeToString,
            operations__pb2.PortfolioResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SandboxPayIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/SandboxPayIn',
            sandbox__pb2.SandboxPayInRequest.SerializeToString,
            sandbox__pb2.SandboxPayInResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSandboxWithdrawLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SandboxService/GetSandboxWithdrawLimits',
            operations__pb2.WithdrawLimitsRequest.SerializeToString,
            operations__pb2.WithdrawLimitsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
